{"mineWoodLog": {"code": "async function mineWoodLog(bot) {\n  const woodLogNames = [\"oak_log\", \"birch_log\", \"spruce_log\", \"jungle_log\", \"acacia_log\", \"dark_oak_log\", \"mangrove_log\"];\n  let woodLogBlock;\n\n  // Explore until a wood log block is found\n  while (!woodLogBlock) {\n    const direction = new Vec3(Math.floor(Math.random() * 3) - 1, 0, Math.floor(Math.random() * 3) - 1);\n    woodLogBlock = await exploreUntil(bot, direction, 60, () => {\n      return bot.findBlock({\n        matching: block => woodLogNames.includes(block.name),\n        maxDistance: 32\n      });\n    });\n    if (woodLogBlock) {\n      // Mine the found wood log block\n      bot.chat(\"Wood log found. Mining...\");\n      await mineBlock(bot, woodLogBlock.name, 1);\n      bot.chat(\"Wood log mined.\");\n    } else {\n      bot.chat(\"Could not find a wood log within range.\");\n    }\n  }\n}", "description": "async function mineWoodLog(bot) {\n    // The function explores the environment until it finds a wood log block, then mines the found wood log block.\n}"}, "mineTwoDirtBlocks": {"code": "async function mineTwoDirtBlocks(bot) {\n  let dirtCount = 0;\n  while (dirtCount < 2) {\n    const direction = new Vec3(Math.floor(Math.random() * 3) - 1, 0, Math.floor(Math.random() * 3) - 1);\n    const dirtBlock = await exploreUntil(bot, direction, 60, () => {\n      return bot.findBlock({\n        matching: mcData.blocksByName.dirt.id,\n        maxDistance: 32\n      });\n    });\n    if (dirtBlock) {\n      bot.chat(\"Dirt block found. Mining...\");\n      await mineBlock(bot, \"dirt\", 1);\n      dirtCount++;\n      bot.chat(`Mined ${dirtCount} dirt blocks.`);\n    } else {\n      bot.chat(\"Could not find a dirt block within range.\");\n    }\n  }\n}", "description": "async function mineTwoDirtBlocks(bot) {\n    // The function is about mining two dirt blocks by exploring the environment in random directions until finding a dirt block, then mining it.\n}"}, "obtainBirchLogs": {"code": "async function obtainBirchLogs(bot) {\n  let birchLogs = bot.inventory.count(mcData.itemsByName[\"birch_log\"].id);\n  let logsNeeded = 20 - birchLogs;\n  if (logsNeeded > 0) {\n    while (logsNeeded > 0) {\n      const direction = new Vec3(Math.floor(Math.random() * 3) - 1, 0, Math.floor(Math.random() * 3) - 1);\n      let birchTreeBlock;\n      birchTreeBlock = await exploreUntil(bot, direction, 60, () => {\n        return bot.findBlock({\n          matching: block => block.name === \"birch_log\",\n          maxDistance: 32\n        });\n      });\n      if (birchTreeBlock) {\n        bot.chat(\"Birch tree found. Mining...\");\n        await mineBlock(bot, \"birch_log\", 1);\n        logsNeeded--;\n        birchLogs++;\n        bot.chat(`Mined ${birchLogs} birch logs.`);\n      } else {\n        bot.chat(\"Could not find a birch tree within range.\");\n      }\n    }\n  } else {\n    bot.chat(\"Already have 20 birch logs in the inventory.\");\n  }\n}", "description": "async function obtainBirchLogs(bot) {\n    // The function is about collecting 20 birch logs by exploring and mining nearby birch trees, and it keeps track of the number of logs obtained.\n}"}, "craftCraftingTable": {"code": "async function craftCraftingTable(bot) {\n  const oakPlankCount = bot.inventory.count(mcData.itemsByName.oak_planks.id);\n  if (oakPlankCount < 3) {\n    let oakLogCount = bot.inventory.count(mcData.itemsByName.oak_log.id);\n    while (oakLogCount < 1) {\n      await mineBlock(bot, \"oak_log\", 1);\n      oakLogCount++;\n      bot.chat(`Mined ${oakLogCount} oak logs.`);\n    }\n    while (oakPlankCount < 3) {\n      await craftItem(bot, \"oak_planks\", 1);\n      oakPlankCount++;\n      bot.chat(`Crafted ${oakPlankCount} oak planks.`);\n    }\n  }\n  await craftItem(bot, \"crafting_table\", 1);\n  bot.chat(\"Crafted a crafting table.\");\n}", "description": "async function craftCraftingTable(bot) {\n    // The function crafts a crafting table by first ensuring it has at least three oak planks in its inventory, mining oak logs and crafting oak planks if necessary, then uses these planks to craft the table.\n}"}, "obtainOakLog": {"code": "async function obtainOakLog(bot) {\n  let oakTreeBlock;\n  while (!oakTreeBlock) {\n    const direction = new Vec3(Math.floor(Math.random() * 3) - 1, 0, Math.floor(Math.random() * 3) - 1);\n    oakTreeBlock = await exploreUntil(bot, direction, 60, () => {\n      return bot.findBlock({\n        matching: block => block.name === \"oak_log\",\n        maxDistance: 32\n      });\n    });\n    if (oakTreeBlock) {\n      bot.chat(\"Oak tree found. Mining...\");\n      await mineBlock(bot, \"oak_log\", 1);\n      bot.chat(\"Obtained an oak log.\");\n    } else {\n      bot.chat(\"Could not find an oak tree within range.\");\n    }\n  }\n}", "description": "async function obtainOakLog(bot) {\n    // The function explores the environment in a random direction until it finds an oak tree, then mines one oak log from the tree.\n}"}, "craftWoodenPickaxe": {"code": "async function craftWoodenPickaxe(bot) {\n  let oakPlankCount = bot.inventory.count(mcData.itemsByName.oak_planks.id);\n  let stickCount = bot.inventory.count(mcData.itemsByName.stick.id);\n  while (oakPlankCount < 3 || stickCount < 2) {\n    if (oakPlankCount < 3) {\n      await mineBlock(bot, \"oak_log\", 1);\n      oakPlankCount++;\n      bot.chat(`Mined ${oakPlankCount} oak logs.`);\n      while (oakPlankCount < 3) {\n        await craftItem(bot, \"oak_planks\", 1);\n        oakPlankCount++;\n        bot.chat(`Crafted ${oakPlankCount} oak planks.`);\n      }\n    }\n    if (stickCount < 2) {\n      await mineBlock(bot, \"oak_log\", 1);\n      await craftItem(bot, \"stick\", 1);\n      stickCount++;\n      bot.chat(\"Crafted a stick.\");\n    }\n  }\n  let craftingTableCount = bot.inventory.count(mcData.itemsByName.crafting_table.id);\n  if (craftingTableCount < 1) {\n    await craftItem(bot, \"crafting_table\", 1);\n    bot.chat(\"Crafted a crafting table.\");\n  }\n  const craftingTablePosition = bot.entity.position.offset(1, 0, 0);\n  await placeItem(bot, \"crafting_table\", craftingTablePosition);\n  await craftItem(bot, \"wooden_pickaxe\", 1);\n  bot.chat(\"Wooden pickaxe crafted.\");\n}", "description": "async function craftWoodenPickaxe(bot) {\n    // The function crafts a wooden pickaxe by first gathering necessary materials like oak planks and sticks, then crafting the required items, and finally placing a crafting table and crafting the wooden pickaxe.\n}"}, "mineOakLogs": {"code": "async function mineOakLogs(bot) {\n  let oakLogsCount = bot.inventory.count(mcData.itemsByName.oak_log.id);\n  while (oakLogsCount < 2) {\n    const direction = new Vec3(Math.floor(Math.random() * 3) - 1, 0, Math.floor(Math.random() * 3) - 1);\n    let oakTreeBlock;\n    oakTreeBlock = await exploreUntil(bot, direction, 60, () => {\n      return bot.findBlock({\n        matching: block => block.name === \"oak_log\",\n        maxDistance: 32\n      });\n    });\n    if (oakTreeBlock) {\n      bot.chat(\"Oak tree found. Mining...\");\n      await mineBlock(bot, \"oak_log\", 1);\n      oakLogsCount++;\n      bot.chat(`Mined ${oakLogsCount} oak logs.`);\n    } else {\n      bot.chat(\"Could not find an oak tree within range.\");\n    }\n  }\n}", "description": "async function mineOakLogs(bot) {\n    // The function is about collecting at least 2 oak logs by exploring the environment to find an oak tree, then mining it until the desired amount of oak logs is reached.\n}"}, "mineTwoCoalOres": {"code": "async function mineTwoCoalOres(bot) {\n  let coalCount = bot.inventory.count(mcData.itemsByName.coal.id);\n  while (coalCount < 2) {\n    const direction = new Vec3(Math.floor(Math.random() * 3) - 1, 0, Math.floor(Math.random() * 3) - 1);\n    const coalOreBlock = await exploreUntil(bot, direction, 60, () => {\n      return bot.findBlock({\n        matching: mcData.blocksByName.coal_ore.id,\n        maxDistance: 32\n      });\n    });\n    if (coalOreBlock) {\n      bot.chat(\"Coal ore found. Mining...\");\n      await mineBlock(bot, \"coal_ore\", 1);\n      coalCount++;\n      bot.chat(`Mined ${coalCount} coals.`);\n    } else {\n      bot.chat(\"Could not find a coal ore within range.\");\n    }\n  }\n}", "description": "async function mineTwoCoalOres(bot) {\n    // The function is about mining two coal ores by exploring the environment in random directions until finding a coal ore block, then mining it and repeating the process until two coals are obtained.\n}"}, "mineBirchLogs": {"code": "async function mineBirchLogs(bot) {\n  let birchLogs = bot.inventory.count(mcData.itemsByName[\"birch_log\"].id);\n  let logsNeeded = 2 - birchLogs;\n  if (logsNeeded > 0) {\n    while (logsNeeded > 0) {\n      const direction = new Vec3(Math.floor(Math.random() * 3) - 1, 0, Math.floor(Math.random() * 3) - 1);\n      let birchTreeBlock;\n      birchTreeBlock = await exploreUntil(bot, direction, 60, () => {\n        return bot.findBlock({\n          matching: block => block.name === \"birch_log\",\n          maxDistance: 32\n        });\n      });\n      if (birchTreeBlock) {\n        bot.chat(\"Birch tree found. Mining...\");\n        await mineBlock(bot, \"birch_log\", 1);\n        logsNeeded--;\n        birchLogs++;\n        bot.chat(`Mined ${birchLogs} birch logs.`);\n      } else {\n        bot.chat(\"Could not find a birch tree within range.\");\n      }\n    }\n  } else {\n    bot.chat(\"Already have 2 birch logs in the inventory.\");\n  }\n}", "description": "async function mineBirchLogs(bot) {\n    // The function is about collecting 2 birch logs by exploring the environment to find a birch tree, mining it, and repeating the process until the desired amount of logs is reached.\n}"}, "mineThreeDirtBlocks": {"code": "async function mineThreeDirtBlocks(bot) {\n  let dirtCount = 0;\n  while (dirtCount < 3) {\n    const direction = new Vec3(Math.floor(Math.random() * 3) - 1, 0, Math.floor(Math.random() * 3) - 1);\n    const dirtBlock = await exploreUntil(bot, direction, 60, () => {\n      return bot.findBlock({\n        matching: mcData.blocksByName.dirt.id,\n        maxDistance: 32\n      });\n    });\n    if (dirtBlock) {\n      bot.chat(\"Dirt block found. Mining...\");\n      await mineBlock(bot, \"dirt\", 1);\n      dirtCount++;\n      bot.chat(`Mined ${dirtCount} dirt blocks.`);\n    } else {\n      bot.chat(\"Could not find a dirt block within range.\");\n    }\n  }\n}", "description": "async function mineThreeDirtBlocks(bot) {\n    // The function explores the environment in random directions until it finds three dirt blocks, then mines each of them one by one.\n}"}, "killTwoPigs": {"code": "async function killTwoPigs(bot) {\n  // Equip a wooden pickaxe from the inventory\n  const woodenPickaxe = bot.inventory.findInventoryItem(mcData.itemsByName.wooden_pickaxe.id);\n  await bot.equip(woodenPickaxe, \"hand\");\n  let pigCount = 0;\n  while (pigCount < 2) {\n    // Find the nearest pig using exploreUntil function\n    let pig;\n    while (!pig) {\n      const direction = new Vec3(Math.floor(Math.random() * 3) - 1, 0, Math.floor(Math.random() * 3) - 1);\n      pig = await exploreUntil(bot, direction, 60, () => {\n        return bot.nearestEntity(entity => entity.name === \"pig\" && entity.position.distanceTo(bot.entity.position) < 32);\n      });\n      if (pig) {\n        bot.chat(\"Pig found.\");\n      } else {\n        bot.chat(\"Could not find a pig within range.\");\n      }\n    }\n\n    // Kill the pig using the equipped wooden pickaxe with killMob function\n    await killMob(bot, \"pig\", 300);\n    bot.chat(`Killed ${pigCount + 1} pig.`);\n\n    // Collect the dropped items after killing the pig\n    await bot.pathfinder.goto(new GoalBlock(pig.position.x, pig.position.y, pig.position.z));\n    bot.chat(\"Collected dropped items.\");\n    pigCount++;\n  }\n}", "description": "async function killTwoPigs(bot) {\n    // The function kills two pigs using a wooden pickaxe by finding the nearest pig, killing it, collecting the dropped items, and repeating this process until two pigs are killed.\n}"}, "mineMoreOakLogs": {"code": "async function mineMoreOakLogs(bot) {\n  // Check if there's an axe in the inventory\n  let axeCount = bot.inventory.count(mcData.itemsByName.wooden_pickaxe.id);\n  if (axeCount < 1) {\n    // Place a crafting table nearby\n    await placeItem(bot, \"crafting_table\", bot.entity.position.offset(1, 0, 0));\n    // Craft a wooden pickaxe using oak logs\n    await mineBlock(bot, \"oak_log\", 3);\n    await craftItem(bot, \"wooden_pickaxe\", 1);\n  }\n\n  // Explore until an oak tree is found\n  let oakTreeBlock;\n  while (!oakTreeBlock) {\n    const direction = new Vec3(Math.floor(Math.random() * 3) - 1, 0, Math.floor(Math.random() * 3) - 1);\n    oakTreeBlock = await exploreUntil(bot, direction, 60, () => {\n      return bot.findBlock({\n        matching: block => block.name === \"oak_log\",\n        maxDistance: 32\n      });\n    });\n    if (oakTreeBlock) {\n      bot.chat(\"Oak tree found. Mining...\");\n      // Mine 3 more oak logs\n      await mineBlock(bot, \"oak_log\", 3);\n      bot.chat(\"Mined 3 more oak logs.\");\n    } else {\n      bot.chat(\"Could not find an oak tree within range.\");\n    }\n  }\n}", "description": "async function mineMoreOakLogs(bot) {\n    // The function is about mining more oak logs using a wooden pickaxe, first checking if there's an axe in the inventory and crafting one if needed, then exploring until finding an oak tree and mining 3 more oak logs.\n}"}, "obtainMoreOakLogs": {"code": "async function obtainMoreOakLogs(bot) {\n  const oakLogName = \"oak_log\";\n  let oakLogsCount = bot.inventory.count(mcData.itemsByName[oakLogName].id);\n  if (oakLogsCount >= 3) {\n    bot.chat(\"Already have 3 oak logs in inventory.\");\n    return;\n  }\n  bot.chat(`Mining ${3 - oakLogsCount} oak logs...`);\n  while (oakLogsCount < 3) {\n    const direction = new Vec3(Math.floor(Math.random() * 3) - 1, 0, Math.floor(Math.random() * 3) - 1);\n    let oakTreeBlock;\n    oakTreeBlock = await exploreUntil(bot, direction, 60, () => {\n      return bot.findBlock({\n        matching: block => block.name === \"oak_log\",\n        maxDistance: 32\n      });\n    });\n    if (oakTreeBlock) {\n      bot.chat(\"Oak tree found. Mining...\");\n      await mineBlock(bot, oakLogName, 1);\n      oakLogsCount++;\n      bot.chat(`Mined ${oakLogsCount} oak logs.`);\n    } else {\n      bot.chat(\"Could not find an oak tree within range.\");\n    }\n  }\n}", "description": "async function obtainMoreOakLogs(bot) {\n    // The function is about collecting 3 oak logs by exploring the environment to find oak trees, mining them, and counting the collected oak logs until reaching a total of 3.\n}"}, "killChicken": {"code": "async function killChicken(bot) {\n  // Check if we have a wooden pickaxe in our inventory. If not, craft one.\n  let woodenPickaxeCount = bot.inventory.count(mcData.itemsByName.wooden_pickaxe.id);\n  if (woodenPickaxeCount < 1) {\n    await craftWoodenPickaxe(bot);\n  }\n\n  // Equip the wooden pickaxe\n  const woodenPickaxe = bot.inventory.findInventoryItem(mcData.itemsByName.wooden_pickaxe.id);\n  await bot.equip(woodenPickaxe, \"hand\");\n\n  // Explore until we find a chicken within a range of 32 blocks.\n  let chicken;\n  while (!chicken) {\n    const direction = new Vec3(Math.floor(Math.random() * 3) - 1, 0, Math.floor(Math.random() * 3) - 1);\n    chicken = await exploreUntil(bot, direction, 60, () => {\n      return bot.nearestEntity(entity => entity.name === \"chicken\" && entity.position.distanceTo(bot.entity.position) < 32);\n    });\n    if (chicken) {\n      bot.chat(\"Chicken found.\");\n    } else {\n      bot.chat(\"Could not find a chicken within range.\");\n    }\n  }\n\n  // Kill the chicken using the equipped wooden pickaxe.\n  await killMob(bot, \"chicken\", 300);\n  bot.chat(\"1 chicken killed.\");\n}", "description": "async function killChicken(bot) {\n    // The function is about killing a chicken using a wooden pickaxe. First, it checks if a wooden pickaxe is in the inventory and crafts one if not available. Then, it equips the wooden pickaxe and explores the environment until finding a chicken within a range of 32 blocks. Once a chicken is found, it kills the chicken using the equipped wooden pickaxe.\n}"}, "mineThreeCoalOres": {"code": "async function mineThreeCoalOres(bot) {\n  let coalCount = bot.inventory.count(mcData.itemsByName.coal.id);\n  while (coalCount < 3) {\n    const direction = new Vec3(Math.floor(Math.random() * 3) - 1, 0, Math.floor(Math.random() * 3) - 1);\n    const coalOreBlock = await exploreUntil(bot, direction, 60, () => {\n      return bot.findBlock({\n        matching: mcData.blocksByName.coal_ore.id,\n        maxDistance: 32\n      });\n    });\n    if (coalOreBlock) {\n      bot.chat(\"Coal ore found. Mining...\");\n      await mineBlock(bot, \"coal_ore\", 1);\n      coalCount++;\n      bot.chat(`Mined ${coalCount} coals.`);\n    } else {\n      bot.chat(\"Could not find a coal ore within range.\");\n    }\n  }\n}", "description": "async function mineThreeCoalOres(bot) {\n    // The function is about mining three coal ores by exploring the environment in random directions until finding a coal ore block, then mining it and repeating this process until three coals are obtained.\n}"}, "mineIronOre": {"code": "async function mineIronOre(bot) {\n  let ironOreFound = false;\n  while (!ironOreFound) {\n    const direction = new Vec3(Math.floor(Math.random() * 3) - 1, 0, Math.floor(Math.random() * 3) - 1);\n    const ironOreBlock = await exploreUntil(bot, direction, 60, () => {\n      return bot.findBlock({\n        matching: mcData.blocksByName.iron_ore.id,\n        maxDistance: 32\n      });\n    });\n    if (ironOreBlock) {\n      bot.chat(\"Iron ore found. Mining...\");\n      await mineBlock(bot, \"iron_ore\", 1);\n      ironOreFound = true;\n      bot.chat(\"Mined 1 iron ore.\");\n    } else {\n      bot.chat(\"Could not find an iron ore within range.\");\n    }\n  }\n}", "description": "async function mineIronOre(bot) {\n    // The function explores the environment in random directions until it finds an iron ore block, then mines one iron ore block using a pickaxe.\n}"}, "mineThreeMoreCoalOres": {"code": "async function mineThreeMoreCoalOres(bot) {\n  let coalCount = bot.inventory.count(mcData.itemsByName.coal.id);\n  while (coalCount < 3) {\n    const direction = new Vec3(Math.floor(Math.random() * 3) - 1, 0, Math.floor(Math.random() * 3) - 1);\n    const coalOreBlock = await exploreUntil(bot, direction, 60, () => {\n      return bot.findBlock({\n        matching: mcData.blocksByName.coal_ore.id,\n        maxDistance: 32\n      });\n    });\n    if (coalOreBlock) {\n      bot.chat(\"Coal ore found. Mining...\");\n      await mineBlock(bot, \"coal_ore\", 1);\n      coalCount++;\n      bot.chat(`Mined ${coalCount} coals.`);\n    } else {\n      bot.chat(\"Could not find a coal ore within range.\");\n    }\n  }\n}", "description": "async function mineThreeMoreCoalOres(bot) {\n    // The function mines three more coal ores by exploring the environment in random directions until finding a coal ore block, then mining it.\n}"}, "mineTwoIronOres": {"code": "async function mineTwoIronOres(bot) {\n  let ironOreCount = 0;\n  while (ironOreCount < 2) {\n    const direction = new Vec3(Math.floor(Math.random() * 3) - 1, 0, Math.floor(Math.random() * 3) - 1);\n    const ironOreBlock = await exploreUntil(bot, direction, 60, () => {\n      return bot.findBlock({\n        matching: mcData.blocksByName.iron_ore.id,\n        maxDistance: 32\n      });\n    });\n    if (ironOreBlock) {\n      bot.chat(\"Iron ore found. Mining...\");\n      await mineBlock(bot, \"iron_ore\", 1);\n      ironOreCount++;\n      bot.chat(`Mined ${ironOreCount} iron ores.`);\n    } else {\n      bot.chat(\"Could not find an iron ore within range.\");\n    }\n  }\n}", "description": "async function mineTwoIronOres(bot) {\n    // The function is about mining two iron ore blocks by exploring the environment in random directions until finding an iron ore block, then mining it.\n}"}, "mineThreeCopperOres": {"code": "async function mineThreeCopperOres(bot) {\n  let copperOreCount = 0;\n  while (copperOreCount < 3) {\n    const direction = new Vec3(Math.floor(Math.random() * 3) - 1, 0, Math.floor(Math.random() * 3) - 1);\n    const copperOreBlock = await exploreUntil(bot, direction, 60, () => {\n      return bot.findBlock({\n        matching: mcData.blocksByName.copper_ore.id,\n        maxDistance: 32\n      });\n    });\n    if (copperOreBlock) {\n      bot.chat(\"Copper ore found. Mining...\");\n      await mineBlock(bot, \"copper_ore\", 1);\n      copperOreCount++;\n      bot.chat(`Mined ${copperOreCount} copper ores.`);\n    } else {\n      bot.chat(\"Could not find a copper ore within range.\");\n    }\n  }\n}", "description": "async function mineThreeCopperOres(bot) {\n    // The function is about mining three copper ores by randomly exploring the environment, finding a copper ore block, and then mining it.\n}"}, "mineTwoCopperOres": {"code": "async function mineTwoCopperOres(bot) {\n  let copperOreCount = 0;\n  while (copperOreCount < 2) {\n    const direction = new Vec3(Math.floor(Math.random() * 3) - 1, 0, Math.floor(Math.random() * 3) - 1);\n    const copperOreBlock = await exploreUntil(bot, direction, 60, () => {\n      return bot.findBlock({\n        matching: mcData.blocksByName.copper_ore.id,\n        maxDistance: 32\n      });\n    });\n    if (copperOreBlock) {\n      bot.chat(\"Copper ore found. Mining...\");\n      await mineBlock(bot, \"copper_ore\", 1);\n      copperOreCount++;\n      bot.chat(`Mined ${copperOreCount} copper ores.`);\n    } else {\n      bot.chat(\"Could not find a copper ore within range.\");\n    }\n  }\n}", "description": "async function mineTwoCopperOres(bot) {\n    // The function is about mining two copper ores by exploring the environment in random directions until finding a copper ore block, then mining it.\n}"}, "craftStoneSword": {"code": "async function craftStoneSword(bot) {\n  let cobblestoneCount = bot.inventory.count(mcData.itemsByName.cobblestone.id);\n  let stickCount = bot.inventory.count(mcData.itemsByName.stick.id);\n  while (cobblestoneCount < 2 || stickCount < 1) {\n    if (cobblestoneCount < 2) {\n      await mineBlock(bot, \"cobblestone\", 1);\n      cobblestoneCount++;\n      bot.chat(`Mined ${cobblestoneCount} cobblestones.`);\n    }\n    if (stickCount < 1) {\n      await mineBlock(bot, \"oak_log\", 1);\n      await craftItem(bot, \"stick\", 1);\n      stickCount++;\n      bot.chat(\"Crafted a stick.\");\n    }\n  }\n  let craftingTableCount = bot.inventory.count(mcData.itemsByName.crafting_table.id);\n  if (craftingTableCount < 1) {\n    await craftItem(bot, \"crafting_table\", 1);\n    bot.chat(\"Crafted a crafting table.\");\n  }\n  const craftingTablePosition = bot.entity.position.offset(1, 0, 0);\n  await placeItem(bot, \"crafting_table\", craftingTablePosition);\n  await craftItem(bot, \"stone_sword\", 1);\n  bot.chat(\"Stone sword crafted.\");\n}", "description": "async function craftStoneSword(bot) {\n    // The function crafts a stone sword by first gathering necessary materials, including cobblestones and sticks, then crafting a crafting table if needed, placing it, and finally crafting the stone sword.\n}"}, "placeChestAroundMe": {"code": "async function placeChestAroundMe(bot) {\n  const chest = bot.inventory.findInventoryItem(mcData.itemsByName.chest.id);\n  if (chest) {\n    const chestPosition = bot.entity.position.offset(1, 0, 0);\n    await placeItem(bot, \"chest\", chestPosition);\n    bot.chat(\"Chest placed.\");\n  } else {\n    bot.chat(\"No chest found in inventory.\");\n  }\n}", "description": "async function placeChestAroundMe(bot) {\n    // The function places a chest from the inventory around the player's current position, provided it exists in the inventory.\n}"}, "craftWoodenAxe": {"code": "async function craftWoodenAxe(bot) {\n  let oakPlankCount = bot.inventory.count(mcData.itemsByName.oak_planks.id);\n  let stickCount = bot.inventory.count(mcData.itemsByName.stick.id);\n  while (oakPlankCount < 3 || stickCount < 2) {\n    if (oakPlankCount < 3) {\n      await mineBlock(bot, \"oak_log\", 1);\n      oakPlankCount++;\n      bot.chat(`Mined ${oakPlankCount} oak logs.`);\n      while (oakPlankCount < 3) {\n        await craftItem(bot, \"oak_planks\", 1);\n        oakPlankCount++;\n        bot.chat(`Crafted ${oakPlankCount} oak planks.`);\n      }\n    }\n    if (stickCount < 2) {\n      await mineBlock(bot, \"oak_log\", 1);\n      await craftItem(bot, \"stick\", 1);\n      stickCount++;\n      bot.chat(\"Crafted a stick.\");\n    }\n  }\n  let craftingTableCount = bot.inventory.count(mcData.itemsByName.crafting_table.id);\n  if (craftingTableCount < 1) {\n    await craftItem(bot, \"crafting_table\", 1);\n    bot.chat(\"Crafted a crafting table.\");\n  }\n  const craftingTablePosition = bot.entity.position.offset(1, 0, 0);\n  await placeItem(bot, \"crafting_table\", craftingTablePosition);\n  await craftItem(bot, \"wooden_axe\", 1);\n  bot.chat(\"Wooden axe crafted.\");\n}", "description": "async function craftWoodenAxe(bot) {\n    // The function crafts a wooden axe by first gathering necessary materials like oak planks and sticks, then crafting the axe using a crafting table.\n}"}, "craftOakPlanks": {"code": "async function craftOakPlanks(bot) {\n  // Place a crafting table near the bot\n  await placeItem(bot, \"crafting_table\", bot.entity.position.offset(1, 0, 0));\n  let oakLogCount = bot.inventory.count(mcData.itemsByName.oak_log.id);\n  while (oakLogCount < 1) {\n    const direction = new Vec3(Math.floor(Math.random() * 3) - 1, 0, Math.floor(Math.random() * 3) - 1);\n    let oakTreeBlock;\n    oakTreeBlock = await exploreUntil(bot, direction, 60, () => {\n      return bot.findBlock({\n        matching: block => block.name === \"oak_log\",\n        maxDistance: 32\n      });\n    });\n    if (oakTreeBlock) {\n      bot.chat(\"Oak tree found. Mining...\");\n      await mineBlock(bot, \"oak_log\", 1);\n      oakLogCount++;\n      bot.chat(`Mined ${oakLogCount} oak logs.`);\n    } else {\n      bot.chat(\"Could not find an oak tree within range.\");\n    }\n  }\n  await craftItem(bot, \"oak_planks\", 4);\n  bot.chat(\"Crafted 4 oak planks.\");\n}", "description": "async function craftOakPlanks(bot) {\n    // The function crafts 4 oak planks by first placing a crafting table near the bot, then searching for an oak log within range and mining it if found, and finally crafting the oak planks using the mined oak logs.\n}"}, "craftWoodenSword": {"code": "async function craftWoodenSword(bot) {\n  let stickCount = bot.inventory.count(mcData.itemsByName.stick.id);\n  let woodPlankCount = bot.inventory.count(mcData.itemsByName.oak_planks.id);\n  while (stickCount < 2 || woodPlankCount < 3) {\n    if (stickCount < 2) {\n      await mineBlock(bot, \"oak_log\", 1);\n      await craftItem(bot, \"stick\", 1);\n      stickCount++;\n      bot.chat(`Crafted ${stickCount} sticks.`);\n    }\n    if (woodPlankCount < 3) {\n      await mineBlock(bot, \"oak_log\", 1);\n      await craftItem(bot, \"oak_planks\", 1);\n      woodPlankCount++;\n      bot.chat(`Crafted ${woodPlankCount} oak planks.`);\n    }\n  }\n  let craftingTableCount = bot.inventory.count(mcData.itemsByName.crafting_table.id);\n  if (craftingTableCount < 1) {\n    await craftItem(bot, \"crafting_table\", 1);\n    bot.chat(\"Crafted a crafting table.\");\n  }\n  const craftingTablePosition = bot.entity.position.offset(1, 0, 0);\n  await placeItem(bot, \"crafting_table\", craftingTablePosition);\n  await craftItem(bot, \"wooden_sword\", 1);\n  bot.chat(\"Wooden sword crafted.\");\n}", "description": "async function craftWoodenSword(bot) {\n    // The function crafts a wooden sword by first gathering necessary materials such as sticks and oak planks, then crafting a crafting table if not already available, placing it, and finally using the crafting table to craft the wooden sword.\n}"}, "mineWoodLogs": {"code": "async function mineWoodLogs(bot) {\n  let axeCount = bot.inventory.count(mcData.itemsByName.wooden_axe.id);\n  if (axeCount < 1) {\n    await craftItem(bot, \"wooden_axe\", 1);\n    bot.chat(\"Crafted a wooden axe.\");\n  }\n  let woodLogCount = bot.inventory.count(mcData.itemsByName.oak_log.id);\n  while (woodLogCount < 25) {\n    const direction = new Vec3(Math.floor(Math.random() * 3) - 1, 0, Math.floor(Math.random() * 3) - 1);\n    let oakTreeBlock;\n    oakTreeBlock = await exploreUntil(bot, direction, 60, () => {\n      return bot.findBlock({\n        matching: block => block.name === \"oak_log\",\n        maxDistance: 32\n      });\n    });\n    if (oakTreeBlock) {\n      bot.chat(\"Oak tree found. Mining...\");\n      await mineBlock(bot, \"oak_log\", 1);\n      woodLogCount++;\n      bot.chat(`Mined ${woodLogCount} oak logs.`);\n    } else {\n      bot.chat(\"Could not find an oak tree within range.\");\n    }\n  }\n}", "description": "async function mineWoodLogs(bot) {\n    // The function is about collecting 25 wood logs by mining oak trees using a wooden axe.\n}"}, "craftBirchPlanks": {"code": "async function craftBirchPlanks(bot) {\n  let birchLogCount = bot.inventory.count(mcData.itemsByName.birch_log.id);\n  if (birchLogCount < 1) {\n    // Explore and mine a birch log\n    const direction = new Vec3(Math.floor(Math.random() * 3) - 1, 0, Math.floor(Math.random() * 3) - 1);\n    let birchTreeBlock;\n    birchTreeBlock = await exploreUntil(bot, direction, 60, () => {\n      return bot.findBlock({\n        matching: block => block.name === \"birch_log\",\n        maxDistance: 32\n      });\n    });\n    if (birchTreeBlock) {\n      bot.chat(\"Birch tree found. Mining...\");\n      await mineBlock(bot, \"birch_log\", 1);\n      birchLogCount++;\n      bot.chat(`Mined ${birchLogCount} birch logs.`);\n    } else {\n      bot.chat(\"Could not find a birch tree within range.\");\n    }\n  }\n\n  // Craft 4 birch planks from the birch log\n  let craftingTableCount = bot.inventory.count(mcData.itemsByName.crafting_table.id);\n  if (craftingTableCount < 1) {\n    await craftItem(bot, \"crafting_table\", 1);\n    bot.chat(\"Crafted a crafting table.\");\n  }\n  const craftingTablePosition = bot.entity.position.offset(1, 0, 0);\n  await placeItem(bot, \"crafting_table\", craftingTablePosition);\n  await craftItem(bot, \"birch_planks\", 4);\n  bot.chat(\"Birch planks crafted.\");\n}", "description": "async function craftBirchPlanks(bot) {\n    // The function crafts 4 birch planks by first ensuring the availability of a birch log, exploring and mining one if necessary, then crafting a crafting table if not already available, placing it, and finally using it to craft the birch planks.\n}"}, "mineRoseBushes": {"code": "async function mineRoseBushes(bot) {\n  let roseBushCount = 0;\n  while (roseBushCount < 10) {\n    const direction = new Vec3(Math.floor(Math.random() * 3) - 1, 0, Math.floor(Math.random() * 3) - 1);\n    const roseBushBlock = await exploreUntil(bot, direction, 60, () => {\n      return bot.findBlock({\n        matching: block => block.name === \"rose_bush\",\n        maxDistance: 32\n      });\n    });\n    if (roseBushBlock) {\n      bot.chat(\"Rose bush found. Mining...\");\n      await mineBlock(bot, \"rose_bush\", 1);\n      roseBushCount++;\n      bot.chat(`Mined ${roseBushCount} rose bushes.`);\n    } else {\n      bot.chat(\"Could not find a rose bush within range.\");\n    }\n  }\n}", "description": "async function mineRoseBushes(bot) {\n    // The function is about mining 10 rose bushes by exploring the environment in random directions until finding one, then mining it and repeating the process until 10 rose bushes are mined.\n}"}, "mineThreeLilacs": {"code": "async function mineThreeLilacs(bot) {\n  let lilacCount = 0;\n  while (lilacCount < 3) {\n    const direction = new Vec3(Math.floor(Math.random() * 3) - 1, 0, Math.floor(Math.random() * 3) - 1);\n    const lilacBlock = await exploreUntil(bot, direction, 60, () => {\n      return bot.findBlock({\n        matching: block => block.name === \"lilac\",\n        maxDistance: 32\n      });\n    });\n    if (lilacBlock) {\n      bot.chat(\"Lilac found. Mining...\");\n      await mineBlock(bot, \"lilac\", 1);\n      lilacCount++;\n      bot.chat(`Mined ${lilacCount} lilacs.`);\n    } else {\n      bot.chat(\"Could not find a lilac within range.\");\n    }\n  }\n}", "description": "async function mineThreeLilacs(bot) {\n    // The function is about mining three lilac blocks by exploring the environment in random directions until finding a lilac block, then mining it.\n}"}, "craftWoodenShovel": {"code": "async function craftWoodenShovel(bot) {\n  let oakPlankCount = bot.inventory.count(mcData.itemsByName.oak_planks.id);\n  let stickCount = bot.inventory.count(mcData.itemsByName.stick.id);\n  while (oakPlankCount < 1 || stickCount < 2) {\n    if (oakPlankCount < 1) {\n      await mineBlock(bot, \"oak_log\", 1);\n      oakPlankCount++;\n      bot.chat(`Mined ${oakPlankCount} oak logs.`);\n      while (oakPlankCount < 1) {\n        await craftItem(bot, \"oak_planks\", 1);\n        oakPlankCount++;\n        bot.chat(`Crafted ${oakPlankCount} oak planks.`);\n      }\n    }\n    if (stickCount < 2) {\n      await mineBlock(bot, \"oak_log\", 1);\n      stickCount++;\n      bot.chat(`Mined ${stickCount} sticks.`);\n    }\n  }\n  let craftingTableCount = bot.inventory.count(mcData.itemsByName.crafting_table.id);\n  if (craftingTableCount < 1) {\n    await craftItem(bot, \"crafting_table\", 1);\n    bot.chat(\"Crafted a crafting table.\");\n  }\n  const craftingTablePosition = bot.entity.position.offset(1, 0, 0);\n  await placeItem(bot, \"crafting_table\", craftingTablePosition);\n  await craftItem(bot, \"wooden_shovel\", 1);\n  bot.chat(\"Wooden shovel crafted.\");\n}", "description": "async function craftWoodenShovel(bot) {\n    // The function crafts a wooden shovel by first gathering necessary materials like oak planks and sticks, then crafting the required items including a crafting table if not already available, and finally placing the crafting table and crafting the wooden shovel.\n}"}}